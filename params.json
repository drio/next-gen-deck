{"name":"Next-gen-deck","body":"## What's this?\r\n\r\nThis is the *Next-Gen Deck*, a tool that makes it very easy to QC your\r\n[Next-Gen sequencing](http://en.wikipedia.org/wiki/DNA_sequencing) data.\r\n\r\n## I want to know more\r\n\r\nThe *Next-Gen Deck* is divided in two parts: the\r\n[Frontend](https://github.com/drio/next-gen-deck/tree/master/frontend)\r\nand the\r\n[Backend](https://github.com/drio/next-gen-deck/tree/master/backend).\r\nThe backend extracts data from\r\n[bam](http://samtools.sourceforge.net/SAM1.pdf) files and loads them\r\nin [redis](http://redis.io/). The frontend is a web application that\r\nqueries the redis server to visualize the different metrics available\r\nfor the different bams. This makes it very easy to find potential issues\r\nand keep track of your data.\r\n\r\n## Backend; details.\r\n\r\nThe backend is divided in two parts. The first part is a tool\r\nthat extracts metrics from a [bam](http://samtools.sourceforge.net/SAM1.pdf)\r\nand creates csv files with the different metrics (Mapped reads, duplicate reads,\r\ninsert size values for the pairs, mapping qualities, etc ...). This part is\r\nwritten in C using [samtools API](http://samtools.sourceforge.net/samtools-c.shtml).\r\n\r\nOnce the csvs are computed per each\r\n[bam](http://samtools.sourceforge.net/SAM1.pdf) we can use the second tool to\r\nstore all these information in the [redis](http://redis.io) database.\r\n\r\nNotice that the paths to the bams are used to keep track of different projects\r\nor subprojects. So we can have a filesystem layout like this:\r\n\r\n```bash\r\n$ pwd\r\n/tmp/bams\r\n$ mkdir project1\r\n$ mkdir project2\r\n$ ln -s /some_path/bam1 ./project1/\r\n$ ln -s /some_path/bam2 ./project2/\r\n\r\n$ ln -s /other_path/bam1 ./project2/\r\n$ ln -s /other_path/bam2 ./project2/\r\n$ ln -s /other_path/bam3 ./project2/\r\n```\r\n\r\n## Frontend; details.\r\n\r\nThe frontend is basically a web app that pulls data from redis and visualizes\r\nthe different metrics for all the different events(bams) available.\r\n\r\nAt its heart, the app uses [d3](http://d3js.org/), a data driven javascript\r\nlibrary for manipulating documents based on data.\r\n\r\nThe main plots show you dotplots of the percentage of mapped reads and\r\nduplicates for all your events so you can quickly look for errors.\r\n\r\nThe *Next-Gen Deck* will load all your events, but very soon I am going to\r\nadd support for filtering based on the name of your events so you can focus\r\non specific projects. Actually that's something that can be done very easily\r\nby just dumping data for the projects you are interested on.\r\n\r\n\r\n## Dependencies\r\n\r\nThe C tool uses the [samtools API](http://samtools.sourceforge.net/samtools-c.shtml).\r\nThe ruby tool uses libraries that come standard with ruby. You just need a\r\n[ruby](http://www.ruby-lang.org/en/) interpreter.\r\n\r\nWe dump all the metrics in [redis](http://redis.io). Redis does not accept\r\nhttp queries natively. Luckily, there is a very lightweight tool called\r\n[wedis](https://github.com/nicolasff/webdis) that fixes that.\r\n\r\nThe frontend is a web app. It uses html, css and javascript. From the\r\n[d3](http://d3js.org/) site:\r\n\r\n```\r\nonly works in “modern” browsers, which generally means everything except IE8 and below\r\n```\r\n\r\n## Usage\r\n\r\nFirst, clone the project and compile the backend tool:\r\n\r\n```bash\r\ngit clone git@github.com:drio/next-gen-deck\r\ncd next-gen-deck/backend ; make\r\n```\r\n\r\nYou probably want to put the backend dir in your PATH.\r\n\r\nNow create your the structure for your bams. Remember, the directory path will be\r\nstored so you can focus on specific projects and sub-projects.\r\n\r\nOnce you have that in place, run ngd-stats against all your bams. You probably\r\nwant to run those in parallel. Most likely you have all these in a HPC cluster.\r\n\r\nNow we should have all the data extracted in csv format per each of the bams.\r\n\r\nIt is time to load all that to the redis server. Make sure that you have redis\r\nup and running and then run the ruby tool:\r\n\r\n```bash\r\n$ cd bams_path\r\n$ load2redis.rb\r\n>> Loading csvs ...\r\n>> Dumping into redis ...\r\n```\r\n\r\nThat shouldn't take too much time. It is basically sucking all the csvs and\r\ndumping them to [redis](http://redis.io).\r\n\r\nNow we are ready to use the frontend.\r\n\r\nMake sure that [wedis](https://github.com/nicolasff/webdis) is up and running.\r\n\r\nWe haven't kept the js dependencies in this repo, but I have a convenient\r\nmakefile in frontend/ that will download them for you. Just run:\r\n\r\n```\r\n$ cd frontend\r\n$ make\r\n```\r\n\r\nNow, fire up your favorite browser and point it to the index.html in\r\nthe frontend directory.\r\n\r\nYou should see the dotplot of the % of dups for your data. Click any of the\r\nbams (dots) and detail metrics for that bam will show up. Repeat as necessary.\r\n\r\n## TODO\r\n\r\nThere is a lot of things that can be done from here. Feel free to send me\r\npull requests with new features or just request them in the ticket system.\r\nAny type of feedback would be very welcome.\r\n","tagline":"A tool for QCing next gen sequencing data.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}